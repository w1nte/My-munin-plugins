#!/usr/bin/env python3

# Copyright (c) 2018 Michael Winterspacher
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import os
import sys
import re

try:
    import dateutil.parser
except ImportError:
    sys.stderr.write("You have to install dateutil! Install python3-pip and run 'pip3 install python-dateutil'")
    exit()


def main():
    try:
        directory = os.environ['dir']
    except KeyError:
        sys.stderr.write("Environmental Variable 'dir' is required! See Github Wiki for more information!")
        return

    name = re.sub(r'rdiff_backup_(.*?)(\.py)?', r'\1', os.path.basename(sys.argv[0]))

    if len(sys.argv) == 2:
        if sys.argv[1] == 'config':
            sys.stdout.write("graph_title Rdiff-Backup {}\n".format(name if name else directory))
            sys.stdout.write("graph_vlabel {}\n".format(directory))
            sys.stdout.write("graph_category backup\n")
            sys.stdout.write("graph_args -l 0\n")

            sys.stdout.write("IncrementFiles.label Increment Files\n")
            sys.stdout.write("IncrementFiles.type GAUGE\n")
            sys.stdout.write("IncrementFiles.draw AREA\n")
            sys.stdout.write("IncrementFiles.colour COLOUR1\n")  # Blue

            sys.stdout.write("newFiles.label New Files\n")
            sys.stdout.write("newFiles.type GAUGE\n")
            sys.stdout.write("newFiles.draw AREA\n")
            sys.stdout.write("newFiles.colour COLOUR0\n")  # Green

            sys.stdout.write("DeletedFiles.label Deleted Files\n")
            sys.stdout.write("DeletedFiles.type GAUGE\n")
            sys.stdout.write("DeletedFiles.draw STACK\n")
            sys.stdout.write("DeletedFiles.colour COLOUR7\n")  # Red

            sys.stdout.write("ChangedFiles.label Changed Files\n")
            sys.stdout.write("ChangedFiles.type GAUGE\n")
            sys.stdout.write("ChangedFiles.draw STACK\n")
            sys.stdout.write("ChangedFiles.colour COLOUR2\n")  # Orange

            sys.stdout.write("Errors.label Error\n")
            sys.stdout.write("Errors.critical :1\n")
            sys.stdout.write("Errors.draw LINE1\n")
            sys.stdout.write("Errors.colour COLOUR15\n")  # Dark Red

            sys.stdout.flush()
            return True
        else:
            directory = sys.argv[1]

    try:
        data = read_statistics_data(os.path.join(directory, 'rdiff-backup-data/'))

        sys.stdout.write("IncrementFiles.value {}\n".format(data['IncrementFiles']))
        sys.stdout.write("newFiles.value {}\n".format(data['NewFiles']))
        sys.stdout.write("DeletedFiles.value {}\n".format(data['DeletedFiles']))
        sys.stdout.write("ChangedFiles.value {}\n".format(data['ChangedFiles']))
        sys.stdout.write("Errors.value {}\n".format(data['Errors']))

        sys.stdout.flush()
    except IndexError:
        pass


def get_rdiff_file(rdiff_type, folder, offset=0):

    files = []
    for f in map(lambda d: d.split('.'), os.listdir(folder)):
        if len(f) == 3:
            (name, date, ext) = f
            if rdiff_type == name:
                files.append({
                    'file': os.path.join(folder, "{}.{}.{}".format(name, date, ext)),
                    'name': name,
                    'date': dateutil.parser.parse(date.replace('_', ':'))
                })

    files.sort(key=lambda x: x['date'].timetuple())
    files.reverse()

    return files[offset]['file']


def read_statistics_data(folder):

    rdiff_file = get_rdiff_file('session_statistics', folder)

    d = {}
    with open(rdiff_file, 'r') as f:
        c = f.read()
        for val in map(lambda x: x.split(" "), c.split("\n")):
            if len(val) > 1:
                d[val[0]] = val[1]
    return d


if __name__ == '__main__':

    main()
